/*************** NASA Ames Perception & Cognition Group ***************USAGE		There are several routines, refer to individual documentations.ARGUMENTSfor both q_EEntropy() and q_EVariance():	QCondition	*qc			pointer to the condition for which the expected							variance or entropy is to be computed	QCondition 	*qcTemp		pointer to a temporary condition to be used							temporarily as a scratch pad. This condition							must have already been allocated, e.g. by							q_makeCond().	double		intensity	the test intensity at which the expected							variance or entropy is to be calculated.							SUMMARY	These routines, q_EVariance() & q_EEntropy(), are used to calculate the expected variance or expected entropy ofa condition at a test intensity. The expected variance or entropy is calculated by looking ahead one trial and calculating the actual variance or entropy of the condition if a postive response is given andif a negative response is given. Each of these variances or entropies is multiplied by the probability of a positive response(pLatestResponse). q_ECost() receives a pointer to a function that either calculates variance or entropy of a condition.q_EVariance() and q_EEntropy() simply call q_ECost(), passinga pointer to q_variance() and q_entropy(), respectively.EXAMPLES	#include "q_include.h"	QCondition	*qc,*QCondtemp;	double intensity,expected_entropy;		*** allocate and initialize qc and QCondtemp with q_makeCond() ***	.	.	*** perform some trials ***	.	*** calculate the expected entropy of qc at a test intensity of 0.0 ***	intensity= 0.0;	expected_entropy = q_EEntropy(qc, qcTemp, intensity);	RETURN VALUE	double q_EVariance(): expected variance at this test intensity	double q_EEntropy(): expected entropy at this test intensityERROR HANDLING & LIMITATIONSCOMMENTS	The user will rarely call q_ECost(). More frequentlya call to q_EVariance() or q_EEntropy will be used.HISTORY	12/6/87	DGP: removed from q_minCost(), and simplified.	8/28/91	dgp	added prototype for costFunction() argument.	8/30/91	dgp generalized to arbitrary number of responses	9/1/91		dgp	 only sum cost when pLatestResponse>0*****************************************************************************/#include "q_include.h"double q_EEntropy(qc,qcTemp,intensity)/* returns the expected entropy after the prospective trial at intensity */QCondition *qc,*qcTemp;double intensity;{	return q_ECost(qc,qcTemp,q_entropy,intensity);}double q_EVariance(qc,qcTemp,intensity)/* returns the expected variance after the prospective trial at intensity */QCondition *qc,*qcTemp;double intensity;{	return q_ECost(qc,qcTemp,q_variance,intensity);}double q_ECost(qc,qcTemp,costFunction,intensity)/* returns the expected cost after the prospective trial at intensity */QCondition *qc,*qcTemp;double intensity;double (*costFunction)(QCondition *qc);{	double eCost;	int r,destroy=0;		if(qc==NULL) return NAN;	if(qcTemp==NULL){		q_makeCond(&qcTemp,qc			,qc->nResponses,qc->nLevels,qc->grain,qc->guess,qc->nInitial);		destroy=1;	}	eCost=0.0;	for(r=0; r<qc->nResponses; r++) {		q_copyCond(qc,qcTemp);		q_updateCond(qcTemp,intensity,r);		if(qcTemp->pLatestResponse>0.0)			eCost+=(*costFunction)(qcTemp)*qcTemp->pLatestResponse;	}	if(destroy)q_freeCond(&qcTemp);	return eCost;}