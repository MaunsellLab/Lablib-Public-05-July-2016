/* Quest.hThis header file describes a structure and high-level user-callable routinesfor use with the Quest package.HISTORY:6/9/90	dgp	wrote it.8/30/91	dgp commented out references to UserParameters. Added def of CONDITIONS.5/16/92	dgp	cosmetic changes.10/22/92 dgp changed _QUEST_ to _Quest_12/8/92	dgp changed QuestPrintf declaration to return void.12/29/93	dgp changed _Quest_ to __QUEST__8/31/94	dgp reduced CONDITIONS from 85 to 20*/#pragma once			/* suppress multiple inclusions of this file */#ifndef __QUEST__		/* suppress multiple inclusions of this file */#define __QUEST__ 1		/* suppress multiple inclusions of this file */#include "q_include.h"#define CONDITIONS 5typedef struct {	double grain;		/* The grain of the testing level. */	int nLevels;		/* Number of possible testing levels */	int nResponses;		/* The number of legal responses: 0...nResponses-1 */	int nConds;			/* The number of conditions for this experiment. */	int nTrials;		/* Number of trials to be run for each condition */	int nInitial;		/* Number of trials in which pInitial distribution						will be used, or -1 for forever. After trial nInitial, pInitial						will be divided out.  */	double guess[CONDITIONS];/* List of guesses supplied by experimenter. */	double initialSD;	/* sd of threshold guess					*/	double quantileOrder;	/* Setting it to NAN requests automatic setting to best */	PResponseFunction function;	double beta;		/* parameters of the psychometric function	*/	double gamma;		/*		"	   "  "		  "			"		*/	double delta;		/*		"	   "  "		  "			"		*/	double epsilon;		/*		"	   "  "		  "			"		*/	int fakeIt;			/* 1 to simulate an observer, 0 to use a real observer */	double actualThreshold[CONDITIONS];/* "actual" threshold values for simulation */	double thresholdEstimate[CONDITIONS];/* Returned list of final estimates of threshold.*/	QCondition *qConds[CONDITIONS];	/* Pointers to condition structures. */	double *upperVisibility;	/* used by Brightest.c */	unsigned long seed;			/* seed for srand() */} Quest;void QuestOpen(Quest *q);void QuestClose(Quest *q);void QuestUpdate(Quest *q,int cond,double intensity,int response);int QuestSimulateObserver(Quest *q,int cond,double intensity);double QuestQuantile(Quest *q,int cond);double QuestMean(Quest *q,int cond);double QuestSd(Quest *q,int cond);void QuestPlot(Quest *q,int cond,double intensity,int response);void QuestPrint(FILE *file,Quest *q,int cond);double QuestPResponse(Quest *q,int response,double intensity);double QuestGetSample(Quest *q,int cond);double WeibullPResponse(int response,double intensity,double beta,double gamma,double delta,double epsilon);/* IsNan.c */int IsNan(double x);int IsInf(double x);#ifndef IsFinite	#define IsFinite(x) ((*(short *)&(x) & 32767)!=32767)	/* neither NAN nor ±INF */#endif#endif	/* __QUEST__ */