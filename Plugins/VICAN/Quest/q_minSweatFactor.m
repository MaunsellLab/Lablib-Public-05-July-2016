/*********************** FUNCTION DESCRIPTION *************************USAGE	q->epsilon=q_minSweatFactor(q->function,q->beta,q->gamma,q->delta,0.0);	sweatFactor=q_sweatFactor(function, intensity, beta, gamma, delta, epsilon);ARGUMENTSSUMMARY	q_minSweatFactor() returns the intensity that minimizes the sweat factor.	The principal use for this is to set the value of epsilon.EXAMPLESRETURN VALUEERROR HANDLING & LIMITATIONSCOMMENTS	One problem in numerically computing a derivative is that you have to	more or less arbitrarily decide on a step size. I'm using a step of	1e-3, which is intended to be small compared to features of the	psychometric function, yet large relative to numerical precision,	to get a useful estimate of slope.		Static variables are used to pass values to q_sweatFactor(), since	q_brent() won't pass them, and I don't want to modify q_brent HISTORY	12/6/87	DGP 	9/2/91	dgp	Removed all explicit references to Weibull, now simply				accepting an arbitrary PResponseFunction from the user.				The minus is that the derivative must now be computed numerically.				The big plus is that the derivative will be right. In the				past I kept forgetting to update the derivative function when				I changed the psychometric function.				I eliminated the *sweatFactor argument to q_minSweatFactor() since I never				use it. The sweat can be obtained by calling q_sweatFactor().	4/23/92		dgp: now use a PResponseFunction, which accepts an additional				argument specifying the response, in place of the old				PsychometricFunction. However, I only consider response==1.*****************************************************************************/#include "q_include.h"static double _SweatFactor(double intensity);PResponseFunction q_function;static double q_beta,q_gamma,q_delta,q_epsilon;double q_minSweatFactor(PResponseFunction function	,double beta,double gamma,double delta,double epsilon){	double xmin,tol;		q_function=function;	q_beta=beta;	q_gamma=gamma;	q_delta=delta;	q_epsilon=epsilon;	tol=0.0001;						/* desired precision for answer *///	sweatFactor=q_brent(-10.0,0.0,10.0,_SweatFactor,tol,&xmin);	q_brent(-10.0,0.0,10.0,_SweatFactor,tol,&xmin);	return xmin;}static double _SweatFactor(double intensity)	/* just for internal use */{	return q_sweatFactor(q_function,intensity,q_beta,q_gamma,q_delta,q_epsilon);}double q_sweatFactor(PResponseFunction function,double intensity	,double beta,double gamma,double delta,double epsilon){	double p,dp,di;	int response=1;		p=(*function)(response,intensity,beta,gamma,delta,epsilon);	di=1e-3;	dp=p-(*function)(response,intensity-di,beta,gamma,delta,epsilon);	dp/=di;	return p*(1.0-p)/(dp*dp);}