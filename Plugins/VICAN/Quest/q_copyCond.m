/*************** NASA Ames Perception & Cognition Group ***************USAGE	QCondition	*qc,*qcTemp;	*** call q_makeCond() for both conditions to allocate		and initialize them ***	q_copyCond(qc,qcTemp);ARGUMENTS	QCondition	*qc		A pointer to the original condition	QCondition	*qcTemp	A pointer to a temporary condition							whose fields and tables will be made							identical to those at *qc.							SUMMARY	To compute the expected variance or entropy of a condition, a duplicate temporary condition is needed. q_copyCond() will equatethe fields and the p arrays of two conditions. The originaland the temporary condition must have already been allocated withq_makeCond(). q_copyCond() does not copy the elements of thetrials or responses arrays because these are not needed to compute statistics.EXAMPLE	q_makeCond(&qc, NULL, nLevels, grain, guess , nInitial);	q_makeCond(&qcTemp, NULL, nLevels, grain, guess , nInitial);	*** perform a trial with qc ***	expected_cost = 0.0;	for(response = 0; response<qc->nResponses; response++) {		q_copyCond(qc,qcTemp);		q_updateCond(qcTemp,intensity,response);		expected_cost += q_variance(qcTemp)*qcTemp->pLatestResponse;	}RETURN VALUE	ERROR HANDLING & LIMITATIONSCOMMENTSHISTORY11/87	DGP8/31/94	dhb & dgp changed fprintf(stderr,...) to printf(...) for compatibility with MATLAB.9/1/94	dgp save and restore H,likelihood, and pSum array pointers.*****************************************************************************/#include "q_include.h"#ifndef assert	#include <assert.h>	#include <stdlib.h>	#include <stdio.h>	#include <string.h>#endifvoid q_copyCond(QCondition *qc,QCondition *qcTemp)/* Makes a working copy of a condition. */{	int r,*trialsSave,*responsesSave[RESPONSES];	double *pSave;	double *HSave,*likelihoodSave,*pSumSave;		if(qc==NULL || qcTemp==NULL){		printf("q_copyCond: NULL condition pointer.\n\007");		exit(1);	}	/*	Preserve pointers to these arrays, because 	these arrays are modified by q_updateCond()	*/	trialsSave=qcTemp->trials;	for(r=0; r<RESPONSES; r++) responsesSave[r]=qcTemp->responses[r];	pSave=qcTemp->p;	HSave=qcTemp->H;	likelihoodSave=qcTemp->likelihood;	pSumSave=qcTemp->pSum;		*qcTemp=*qc;				/* copy the structure */		/* restore the three pointers */	qcTemp->trials=trialsSave;	for(r=0; r<RESPONSES; r++) qcTemp->responses[r]=responsesSave[r];	qcTemp->p=pSave;	qcTemp->H=HSave;	qcTemp->likelihood=likelihoodSave;	qcTemp->pSum=pSumSave;		/* copy the p array, because it is read & written by q_updateCond.*/	assert(qcTemp->p!=NULL);	memcpy((char *)qcTemp->p,(char *)qc->p,qcTemp->nLevels*sizeof(double));	/*	it is not necessary to copy the trials and responses 	arrays because q_updateCond doesn't read them; it just increments 'em.	*/}