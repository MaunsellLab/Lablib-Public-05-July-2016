/****************** FUNCTION DESCRIPTION ********************USAGE	q_plot (qc, cond, intensity, response,fakeIt,actualThreshold))ARGUMENTS	qc - the condition	cond - condition number for trial being presented	intensity - signal level at which trial is presented	response - 0 = incorrect response, 1...qc->nResponses-1 = correct responseSUMMARY	Plots one line for each trial containing the trial number, the conditionnumber, the level, and a digit (representing the response) at a location onthe line representing the level. Prints output to stdout.COMMENTS	REVISION HISTORY	9/85		Version 1,	A. B. Watson and K. Baldwin	10/22/86	Version 2,	A. Fitzhugh	11/6/87		FW: receive (QCondition *)qc instead of cond;				use double vars everywhere.	8/31/91		dgp	tidied up, allow for more than 2 kinds of response				Added two more arguments, allowing plot of the				actualThreshold, if it is known (i.e. during simulations).	12/9/91		dgp	Fixed bug in which extreme intensities resulted in out of range				subscript references for plotting, which overwrote other parts of the				stack. The subscript is now bounded.	12/11/91	dgp. Adjusted the field widths slightly so that level -32768				would not screw up the column aligments.*********************************************************/#include <stdio.h>#include "q_include.h"static int IntensityToSubscript(QCondition *qc,double intensity);#define		PLOT_WIDTH	40#define		CENTER		(PLOT_WIDTH - 1)/2void q_plot(QCondition *qc,int cond,double intensity,int response	,int fakeIt,double actualThreshold){	int i,j;	char plot_buffer[PLOT_WIDTH+1];	double bits,totalBits;		for (i=0; i<PLOT_WIDTH; i++) plot_buffer[i]=' ';	plot_buffer[0]='|';				/* boundary markers for plot line */	plot_buffer[PLOT_WIDTH-1]='|';	plot_buffer[CENTER]=' ';		/* zero level marker */	if(fakeIt){		j=IntensityToSubscript(qc,actualThreshold);		plot_buffer[j]=':';	}	plot_buffer[PLOT_WIDTH]=0;	if (qc->trialsTotal==0 && cond==0)		printf("trial cond level intensity %s  bits bits\n",plot_buffer);	j=IntensityToSubscript(qc,intensity);	if (response>=0 && response<16)		plot_buffer[j]="0123456789abcdef"[response];	else		plot_buffer[j]='*';	qc->now.entropy=q_entropy(qc);	totalBits=qc->initial.entropy-qc->now.entropy;	if(response>=0) bits=qc->prior.entropy-qc->now.entropy;	else bits=totalBits/qc->trialsTotal;	printf("%4d%4d%6d%11.2f  %s%+6.2f%5.2f\n"		,qc->trialsTotal,cond,vtol(qc,intensity)		,intensity,plot_buffer,bits,totalBits);}static int IntensityToSubscript(QCondition *qc,double intensity){	int i;		i=CENTER+vtol(qc,intensity)*PLOT_WIDTH/qc->nLevels;	if(i<0)i=0;	if(i>PLOT_WIDTH-1)i=PLOT_WIDTH-1;	return i;}