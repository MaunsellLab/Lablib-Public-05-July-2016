/****************** FUNCTION DESCRIPTION ********************USAGE	p = q_Weibull(response,intensity-actual, beta, gamma, delta, epsilon);or	p = q_WeibullOld_response(intensity-actual, beta, gamma);or	p = q_WeibullOld_psych(intensity-actual, beta, gamma, delta, epsilon);ARGUMENTS	response	the observer's response, 0, 1, ...	intensity	the test intensity, relative to the true threshold	beta		a steepness parameter	gamma		the guessing rate, probability of correct response				at intensity -Inf	delta		the probability of "blinking" or randomly guessing 				at intensity +Inf	epsilon		an offset for intensity to allow threshold 				(intensity=0) to be at any point on the psychometric 				function, e.g. the point of minimum sweat factor.SUMMARY	Implements the Weibull function, with a probability delta of 	blindly guessing on any trial.	RETURN VALUE	Returns a probability, the value of the Weibull psychometric 	function.COMMENTS	The epsilon parameter is used to shift the threshold of	this psychometric curve to the ideal testing point. 	One can determine threshold more efficiently by placing 	the trials at the ideal testing point than at threshold. 	How far above threshold (i.e., epsilon) depends on the 	psychometric curve; see [Watson & Pelli] for how to compute it.		Use the function q_minSweatFactor() to set epsilon.REVISION HISTORY	12/6/87		DGP: removed the Weibull functions from q_psychWeibull				and q_getResponse. It was absurd to define them separately				(and differently) for the assumed psychometric function and				the simulation of the observer.	4/29/89		dgp: replaced beta/20.0 by beta, since I no longer use dB. This				will affect all calls to Weibull.*********************************************************//*********************************************************This is the new Weibull function. I inserted the exponent test to avoid floating underflow on computers that don't support IEEE 754 arithmetic.12/6/87 DGP.*********************************************************/#include <q_include.h>double q_Weibull(int response,double intensity	,double beta,double gamma,double delta,double epsilon){	double p,exponent;		if(response>1)return 0.0;	exponent=beta*(intensity+epsilon);		/* assumes log10 scale, not dB */	if (exponent>1.3)		p=1.0;						/* This avoids floating underflow */	else		p=1.0-(1.0-gamma)*exp(-exp10(exponent));	p=(1.0-delta)*p+delta*gamma;	switch(response){	case 0: return 1.0-p;	case 1: return p;	default: return 0.0;	}}#if 0/*********************************************************This old version of the Weibull function was used to compute the psychometric table in the simulations by AF and ABW.This Weibull function depends solely on beta, gamma and epsilon, except that it is hard-limited at a maximum value of 1-delta.I inserted the exponent test to avoid floating underflow on computers that don't support IEEE 754 arithmetic.12/6/87 DGP.*********************************************************/double q_WeibullOld_psych(intensity,beta,gamma,delta,epsilon)double intensity,beta,gamma,delta,epsilon;{	double p,exponent;	exponent=(beta/20.0)*(intensity+epsilon);	if (exponent>1.3)		return(1.0 -delta);			/* This avoids floating underflow */	p=1.0-(1.0-gamma)*exp(-exp10(exponent));	if (p>1.0 -delta)		p=1.0-delta;	return(p);}/*********************************************************This version of the Weibull function was used to simulate the observer's responses in the simulations by AF and ABW.12/6/87 DGP.*********************************************************/double q_WeibullOld_response(intensity,beta,gamma)double intensity,beta,gamma;{	double p;	p=1.0-(1.0-gamma)*exp(-exp10((beta/20.0)*intensity));	return(p);}#endif